{"version":3,"sources":["components/Login/Login.jsx","App.js","index.js"],"names":["ColorButton","withStyles","theme","root","width","marginTop","height","fontWeight","color","background","breakpoints","down","disabled","Button","useStyles","makeStyles","borderRadius","outlined","transform","error","position","top","fontSize","Login","React","memo","setAuthorized","classes","useState","query","email","setEmail","password","setPassword","isPasswordShown","setPasswordShown","togglePasswordShown","handleChange","event","target","id","value","className","onSubmit","e","preventDefault","isOpen","user","FormControl","variant","InputLabel","htmlFor","OutlinedInput","onChange","labelWidth","FormHelperText","type","endAdornment","InputAdornment","IconButton","aria-label","onClick","onMouseDown","edge","href","Transition","forwardRef","props","ref","Slide","direction","App","isAuthorized","handleCloseDialog","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","fullWidth","DialogTitle","DialogContent","DialogContentText","DialogActions","ReactDOM","render","document","getElementById"],"mappings":"0XAeMA,EAAcC,aAAW,SAACC,GAAD,MAAY,CACzCC,KAAK,aACHC,MAAO,QACPC,UAAW,OACXC,OAAQ,OACRC,WAAY,MACZC,MAAO,UACPC,WAAY,mDACZ,UAAW,CACTA,WAAY,qDAEbP,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BL,OAAQ,OACRF,MAAO,QACPC,UAAW,SAGfO,SAAU,CACRH,WAAY,UACZD,MAAO,yBAnBSP,CAqBhBY,KAEEC,EAAYC,aAAW,SAACb,GAAD,MAAY,CACvCC,KAAK,aACHC,MAAO,QACPE,OAAQ,OACRU,aAAc,QACbd,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BL,OAAQ,SAGZW,SAAS,aACPC,UAAW,yBACVhB,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BO,UAAW,0BAGfC,MAAM,aACJC,SAAU,WACVC,IAAK,OACLC,SAAU,QACTpB,EAAMQ,YAAYC,KAAK,MAAQ,CAC9BU,IAAK,aAKEE,EAAQC,IAAMC,MAAK,YAAwB,IAArBC,EAAoB,EAApBA,cAC3BC,EAAUb,IADqC,EAE3Bc,mBAAS,CACjCC,MAAO,GACPV,OAAO,IAJ4C,mBAE9CW,EAF8C,KAEvCC,EAFuC,OAMrBH,mBAAS,CACvCC,MAAO,GACPV,OAAO,IAR4C,mBAM9Ca,EAN8C,KAMpCC,EANoC,OAUTL,oBAAS,GAVA,mBAU9CM,EAV8C,KAU7BC,EAV6B,KAY/CC,EAAsB,WAC1BD,GAAkBD,IAGdG,EAAe,SAACC,GAAW,IAAD,EACRA,EAAMC,OAApBC,EADsB,EACtBA,GAAIC,EADkB,EAClBA,MAEZ,OAAQD,GACN,IAAK,QACHT,EAAS,CAACZ,OAAO,EAAOU,MAAOY,IAC/B,MACF,IAAK,WACHR,EAAY,CAACd,OAAO,EAAOU,MAAOY,MA0BxC,OACE,sBAAKC,UAAU,QAAf,UACE,oBAAIA,UAAU,eAAd,mBAEA,uBACEA,UAAU,cACVC,SAzBe,SAACC,GAGpB,GAFAA,EAAEC,kBAEGb,EAASH,QAAUC,EAAMD,MAI5B,OAHAE,EAAS,2BAAKD,GAAN,IAAaX,OAAQW,EAAMD,cACnCI,EAAY,2BAAKD,GAAN,IAAgBb,OAAQa,EAASH,SAK9CH,EAAc,CACZoB,QAAQ,EACRC,KAAM,CACJjB,MAAOA,EAAMD,MACbG,SAAUA,EAASH,UASrB,UAIE,sBAAKa,UAAU,gBAAf,UACE,eAACM,EAAA,EAAD,CAAaC,QAAQ,WAArB,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,QACRT,UAAWf,EAAQV,SACnBE,MAAOW,EAAMX,MAHf,2BAOA,cAACiC,EAAA,EAAD,CACEZ,GAAG,QACHC,MAAOX,EAAMD,MACbwB,SAAUhB,EACViB,WAAY,IACZZ,UAAWf,EAAQxB,KACnBgB,MAAOW,EAAMX,QAEdW,EAAMX,OACF,cAACoC,EAAA,EAAD,CACCpC,OAAK,EACLuB,UAAWf,EAAQR,MAFpB,+BAQP,eAAC6B,EAAA,EAAD,CAAaC,QAAQ,WAArB,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,8BACRT,UAAWf,EAAQV,SACnBE,MAAOa,EAASb,MAHlB,sBAOA,cAACiC,EAAA,EAAD,CACEZ,GAAG,WACHgB,KAAMtB,EAAkB,OAAS,WACjCO,MAAOT,EAASH,MAChBwB,SAAUhB,EACVK,UAAWf,EAAQxB,KACnBgB,MAAOa,EAASb,MAChBsC,aACE,cAACC,EAAA,EAAD,CAAgBtC,SAAS,MAAzB,SACE,cAACuC,EAAA,EAAD,CACEC,aAAW,6BACXC,QAASzB,EACT0B,YAAa1B,EACb2B,KAAK,MAJP,SAMG7B,EACG,cAAC,IAAD,CACE1B,MAAOwB,EAASb,MAAQ,QAAU,aAEpC,cAAC,IAAD,CACEX,MAAOwB,EAASb,MAAQ,QAAU,iBAK9CmC,WAAY,KAEbtB,EAASb,OACL,cAACoC,EAAA,EAAD,CACCpC,OAAK,EACLuB,UAAWf,EAAQR,MAFpB,qCAST,cAACnB,EAAD,CACEwD,KAAK,SACLP,QAAQ,YACRrC,SAAUkB,EAAMX,OAASa,EAASb,MAHpC,uBASF,sBAAKuB,UAAU,gBAAf,UACE,mBAAGA,UAAU,yBAAyBsB,KAAK,IAA3C,mCAIA,oBAAGtB,UAAU,sBAAb,4CAEE,mBAAGsB,KAAK,IAAItB,UAAU,kBAAtB,kC,sDCpMJuB,G,MAAazC,IAAM0C,YAAW,SAAoBC,EAAOC,GAC7D,OAAO,cAACC,EAAA,EAAD,aAAOC,UAAU,KAAKF,IAAKA,GAASD,QAqD9BI,MAlDf,WAAgB,IAAD,EACyB3C,mBAAS,CAC7CkB,QAAQ,EACRC,KAAM,CACJjB,MAAO,GACPE,SAAU,MALD,mBACNwC,EADM,KACQ9C,EADR,KASP+C,EAAoB,WACxB/C,EAAc,CACZoB,QAAQ,EACRC,KAAK,eAAKyB,MAId,OACE,sBAAM9B,UAAU,OAAhB,SACE,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CAAOhB,cAAeA,IAEtB,eAACgD,EAAA,EAAD,CACEC,KAAMH,EAAa1B,OACnB8B,oBAAqBX,EACrBY,aAAW,EACXC,QAASL,EACTM,kBAAgB,2BAChBC,mBAAiB,iCACjBC,WAAW,EAPb,UASE,cAACC,EAAA,EAAD,CAAa1C,GAAG,2BAAhB,SAA4C,cAC5C,eAAC2C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAmB5C,GAAG,iCAAtB,oBACUgC,EAAazB,KAAKjB,SAE5B,eAACsD,EAAA,EAAD,wBACaZ,EAAazB,KAAKf,eAGjC,cAACqD,EAAA,EAAD,UACE,cAACxE,EAAA,EAAD,CAAQgD,QAASY,EAAmBjE,MAAM,UAA1C,8BCnDZ8E,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2867966e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport './Login.scss';\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    width: '212px',\n    marginTop: '64px',\n    height: '48px',\n    fontWeight: '500',\n    color: '#FEFEFE',\n    background: 'linear-gradient(90deg, #FF9146 0%, #FF351B 100%)',\n    '&:hover': {\n      background: 'linear-gradient(90deg, #FF9146 0%, #FF351B 75%);',\n    },\n    [theme.breakpoints.down('xs')]: {\n      height: '40px',\n      width: '163px',\n      marginTop: '50px',\n    },\n  },\n  disabled: {\n    background: '#B2B7BB',\n    color: '#FEFEFE !important',\n  }\n}))(Button);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '260px',\n    height: '48px',\n    borderRadius: '10px',\n    [theme.breakpoints.down('xs')]: {\n      height: '40px',\n    },\n  },\n  outlined: {\n    transform: 'translate(14px, 17px)',\n    [theme.breakpoints.down('xs')]: {\n      transform: 'translate(14px, 14px)'\n    }\n  },\n  error: {\n    position: 'absolute',\n    top: '50px',\n    fontSize: '14px',\n    [theme.breakpoints.down('xs')]: {\n      top: '40px',\n    }\n  },\n}));\n\nexport const Login = React.memo(({ setAuthorized }) => {\n  const classes = useStyles();\n  const [email, setEmail] = useState({\n    query: '',\n    error: false,\n  });\n  const [password, setPassword] = useState({\n    query: '',\n    error: false,\n  });\n  const [isPasswordShown, setPasswordShown] = useState(false);\n\n  const togglePasswordShown = () => {\n    setPasswordShown(!isPasswordShown);\n  };\n\n  const handleChange = (event) => {\n    const { id, value } = event.target;\n\n    switch (id) {\n      case 'email':\n        setEmail({error: false, query: value});\n        break;\n      case 'password':\n        setPassword({error: false, query: value});\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!password.query || !email.query) {\n      setEmail({ ...email, error: !email.query });\n      setPassword({ ...password, error: !password.query });\n\n      return;\n    }\n\n    setAuthorized({\n      isOpen: true,\n      user: {\n        email: email.query,\n        password: password.query,\n      }\n    })\n  }\n\n  return (\n    <div className=\"login\">\n      <h1 className=\"login__title\">Login</h1>\n\n      <form\n        className=\"login__form\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"login__inputs\">\n          <FormControl variant=\"outlined\">\n            <InputLabel\n              htmlFor=\"email\"\n              className={classes.outlined}\n              error={email.error}\n            >\n              Email address\n            </InputLabel>\n            <OutlinedInput\n              id=\"email\"\n              value={email.query}\n              onChange={handleChange}\n              labelWidth={100}\n              className={classes.root}\n              error={email.error}\n            />\n            {email.error\n              && <FormHelperText\n                  error\n                  className={classes.error}\n                 >\n                  Email required\n                 </FormHelperText>\n            }\n          </FormControl>\n          <FormControl variant=\"outlined\">\n            <InputLabel\n              htmlFor=\"outlined-adornment-password\"\n              className={classes.outlined}\n              error={password.error}\n            >\n              Password\n            </InputLabel>\n            <OutlinedInput\n              id=\"password\"\n              type={isPasswordShown ? 'text' : 'password'}\n              value={password.query}\n              onChange={handleChange}\n              className={classes.root}\n              error={password.error}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={togglePasswordShown}\n                    onMouseDown={togglePasswordShown}\n                    edge=\"end\"\n                  >\n                    {isPasswordShown\n                      ? <VisibilityOff\n                          color={password.error ? 'error' : 'disabled'}\n                        />\n                      : <Visibility\n                          color={password.error ? 'error' : 'disabled'}\n                        />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              labelWidth={70}\n            />\n            {password.error\n              && <FormHelperText\n                  error\n                  className={classes.error}\n                 >\n                  Password required\n                 </FormHelperText>\n            }\n          </FormControl>\n        </div>\n        <ColorButton\n          type=\"submit\"\n          variant=\"contained\"\n          disabled={email.error || password.error}\n        >\n            Log in\n        </ColorButton>\n      </form>\n\n      <div className=\"login__detail\">\n        <a className=\"login__forgot-password\" href=\"#\">\n          Forgot your password?\n        </a>\n\n        <p className=\"login__new-accoount\">\n          Don’t have an account yet?\n          <a href=\"#\" className=\"login__register\">\n            Register\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n});\n\nLogin.propTypes = {\n  setAuthorized: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Login } from './components/Login'\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nimport './App.scss';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction App() {\n  const [isAuthorized, setAuthorized] = useState({\n    isOpen: false,\n    user: {\n      email: '',\n      password: '',\n    }\n  });\n\n  const handleCloseDialog = () => {\n    setAuthorized({\n      isOpen: false,\n      user: {...isAuthorized}\n    })\n  }\n\n  return (\n    <main className=\"main\">\n      <div className=\"main__container\">\n        <Login setAuthorized={setAuthorized} />\n\n        <Dialog\n          open={isAuthorized.isOpen}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={handleCloseDialog}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n          fullWidth={true}\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"User data\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Email: {isAuthorized.user.email}\n            </DialogContentText>\n            <DialogContentText>\n              Password: {isAuthorized.user.password}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleCloseDialog} color=\"primary\">\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}